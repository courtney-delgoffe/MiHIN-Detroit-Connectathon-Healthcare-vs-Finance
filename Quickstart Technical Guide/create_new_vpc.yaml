AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloudticity: Launches single AZ VPC with Managed NAT'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC Information
        Parameters:
          - AZ1
          - Environment
      - Label:
          default: CIDR Information
        Parameters:
          - CIDRBlockPrimary
          - CIDRBlockSubnetMask
          - CIDRBlockPublicSubnet1
Parameters:
  AZ1:
    Description: The first availability zone in a region
    Type: 'AWS::EC2::AvailabilityZone::Name'
  Environment:
    Description: 'Specify the environment the resources are for. Suggested values are: production,development,qa,staging'
    Default: development
    Type: String
    AllowedPattern: '([a-z]|[0-9]|[_])*'
    ConstraintDescription: must contain only a-z or 0-9.
  CIDRBlockPrimary:
    Type: String
    Default: 10.10.0.0
    ConstraintDescription: Must be valid CIDRBlock IP.
  CIDRBlockSubnetMask:
    Description: (Optional) If you want a CIDR block other than '/24', put the number after the '/' here.
    Type: Number
    Default: '24'
    MinValue: '16'
    MaxValue: '32'
    ConstraintDescription: must be a number between 16 and 32.
  CIDRBlockPublicSubnet1:
    Type: String
    Default: 10.10.3.0
    ConstraintDescription: Must be valid CIDRBlock IP.
Resources:
  SubnetPrivate1:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn:
      - VPC
      - NetworkAcl
      - PrivateRouteTable
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudticity-connectathon-public/subnet.yaml
      Parameters:
        CIDRIP: !Ref CIDRBlockPrimary
        CIDRBlock: !Ref CIDRBlockSubnetMask
        SubnetName: Private1
        VPC: !Ref VPC
        AZ: !Ref AZ1
        NetworkACL: !Ref NetworkAcl
        RouteTable: !Ref PrivateRouteTable
  SubnetPublic1:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn:
      - VPC
      - NetworkAcl
      - PublicRouteTable
    Properties:
      TemplateURL: https://s3.amazonaws.com/cloudticity-connectathon-public/subnet.yaml
      Parameters:
        CIDRIP: !Ref CIDRBlockPublicSubnet1
        CIDRBlock: !Ref CIDRBlockSubnetMask
        SubnetName: Public1
        VPC: !Ref VPC
        AZ: !Ref AZ1
        NetworkACL: !Ref NetworkAcl
        RouteTable: !Ref PublicRouteTable
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Join 
        - ''
        - - !Ref CIDRBlockPrimary
          - /16
      InstanceTenancy: default
  PublicRouteToInternetGateway:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteToNAT:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PrivateRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  InboundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  OutBoundNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  NATEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NAT:
    Type: 'AWS::EC2::NatGateway'
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt 
        - NATEIP
        - AllocationId
      SubnetId: !GetAtt 
        - SubnetPublic1
        - Outputs.SubnetId
Outputs:
  VPCId:
    Description: VPC Id of the newly created VPC
    Value: !Ref VPC